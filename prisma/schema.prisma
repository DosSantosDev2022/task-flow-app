generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_DEV_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  tasks         Task[]
  clients       Client[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Client {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  phone      String?
  address    String?
  city       String?
  state      String?
  postalCode String?
  country    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  projects   Project[] @relation("ClientProjects")
  user       User      @relation(fields: [userId], references: [id])
  userId     String

  @@map("clients")
}

model Project {
  id          String          @id @default(uuid())
  title       String
  slug        String          @unique @default("")
  description String?
  startDate   DateTime
  endDate     DateTime
  prazo       Prazo           @default(DENTRO_DO_PRAZO)
  price       Decimal         @db.Decimal(10, 2)
  payment     Payment
  status      ProjectStatus   @default(PENDENTES)
  priority    ProjectPriority
  tasks       Task[]
  user        User            @relation(fields: [userId], references: [id])
  userId      String
  client      Client          @relation("ClientProjects", fields: [clientId], references: [id])
  clientId    String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("projects")
}

enum Payment {
  CREDITO
  DEBITO
  DINHEIRO
  PIX
}

enum Prazo {
  DENTRO_DO_PRAZO
  FORA_DO_PRAZO
}

model Task {
  id            String     @id @default(uuid())
  title         String
  description   String?
  status        TaskStatus @default(A_FAZER)
  startDate     DateTime
  endDate       DateTime
  completedDate DateTime?
  prazo         Prazo      @default(DENTRO_DO_PRAZO)
  project       Project    @relation(fields: [projectId], references: [id])
  projectId     String
  user          User       @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("tasks")
}

enum TaskStatus {
  A_FAZER
  EM_ANDAMENTO
  CONCLUIDO
}

enum ProjectStatus {
  TODOS
  PENDENTES
  FINALIZADOS
}

enum ProjectPriority {
  ALTA
  MEDIA
  BAIXA
}
